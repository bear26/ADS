Алгоритм:
считываем из файл строки, пока хватает буфера, выделенного для хранения данных в памяти
если буфер заполнен, сортируем в текущие данные в памяти обычным способов и записываем их в новый файл, очищаем буфер
и продолжаем читать новые данные
После считывания файла и разбития его на файлы с сортироваными данными необходимо слить эти данные обратно в один файл.
Для этого можно применить задачу для слияния n отсортированных массивов: на каждом шаге надо выбрать наименьший элемент
из всех массивов, добавить в ответ и удалить его из массива. Для поиска минимального элемента будем использовать приоритетную
очередь. Так как на каждой итерации слияния необходимо знать только один "верхний" элемент массива, то будем подгружать
новый данные из файла постепенно.


Результаты теста:
  в качестве тестового примера был сгенерен файл со 100 тысячами случайных строк длинами от 200 до 500 символов
  сортировка в памяти заняла 1.3 секунды и приложение использовало примерно 46 мегабайт памяти

  при внешней сортировки все зависило от размера буфера, который можно было держать в памяти(размер буфера для простоты задавался, как количество строк, которые можно держать в памяти)
    при размере в 1000   : 4 секунд, 10MB памяти
    при размере в 10000  : 3.5 секунд, 13MB памяти
    при размере в 100000 : 5 секунд, 48MB памяти
